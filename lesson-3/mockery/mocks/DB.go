// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// GetOrderItems provides a mock function with given fields: oid
func (_m *DB) GetOrderItems(oid uint64) ([]uint64, error) {
	ret := _m.Called(oid)

	var r0 []uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]uint64, error)); ok {
		return rf(oid)
	}
	if rf, ok := ret.Get(0).(func(uint64) []uint64); ok {
		r0 = rf(oid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(oid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserName provides a mock function with given fields: uid
func (_m *DB) GetUserName(uid uint64) (string, error) {
	ret := _m.Called(uid)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (string, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
